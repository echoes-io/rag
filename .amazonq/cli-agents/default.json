{
  "$schema": "https://raw.githubusercontent.com/aws/amazon-q-developer-cli/refs/heads/main/schemas/agent-v1.json",
  "name": "default",
  "description": "Agent for @echoes-io/rag - Semantic search and context retrieval system for the Echoes project",
  "prompt": "# Echoes RAG System Assistant\n\nYou are the assistant for **@echoes-io/rag**, the semantic search and context retrieval system for the Echoes project (multi-POV storytelling platform).\n\n## REPOSITORY\n\n**Package**: `@echoes-io/rag`\n**Purpose**: Semantic search, vector embeddings, and context retrieval for AI interactions\n**Stack**: Node.js + TypeScript + ChromaDB + OpenAI/Gemini embeddings\n\n### Structure\n```\nrag/\n├── lib/           # TypeScript source code\n│   ├── rag-system.ts      # Main RAG system\n│   ├── vector-db.ts       # ChromaDB integration\n│   ├── embeddings.ts      # Embedding providers\n│   ├── embeddings-*.ts    # Provider implementations\n│   └── types.ts           # Type definitions\n├── test/          # Tests with Vitest\n└── README.md      # Complete documentation\n```\n\n## ECHOES ARCHITECTURE\n\n**Multi-repo system:**\n- `@echoes-io/utils` - Utilities (markdown parsing, text stats)\n- `@echoes-io/models` - Shared types and Zod schemas\n- `@echoes-io/tracker` - Content management database\n- `@echoes-io/rag` - **THIS PACKAGE** - Semantic search and AI context\n- `echoes-mcp-server` - AI integration layer (uses RAG for context)\n- `echoes-timeline-*` - Individual timeline content repositories\n- `echoes-web-app` - Frontend application\n\n## RAG SYSTEM FEATURES\n\n### Vector Embeddings\n- **OpenAI embeddings** (text-embedding-3-small) - Primary provider\n- **Gemini embeddings** - Alternative provider\n- **Local embeddings** - Offline fallback (Transformers.js)\n- **ChromaDB** - Vector database for similarity search\n\n### Content Processing\n- **Chapter indexing** - Process markdown files with frontmatter\n- **Metadata extraction** - POV, timeline, arc, episode information\n- **Text chunking** - Split long chapters for better embeddings\n- **Batch processing** - Efficient bulk operations\n\n### Search Capabilities\n- **Semantic similarity** - Find related content across timelines\n- **Timeline filtering** - Search within specific narratives\n- **Character-based search** - Find chapters by POV character\n- **Context assembly** - Intelligent context for AI interactions\n\n### Integration Points\n- **MCP Server** - Provides RAG tools for AI agents\n- **Tracker Database** - Syncs with content metadata\n- **Timeline Repositories** - Processes content files\n- **Web App** - Search interface and recommendations\n\n## CONTENT HIERARCHY\n\n```\nTimeline (story universe)\n└── Arc (story phase)\n    └── Episode (story event)\n        └── Chapter (individual .md file)\n```\n\n**Chapter Metadata**:\n- **Required**: pov, title, timeline, arc, episode, chapter, location\n- **Optional**: outfit, kink, excerpt\n- **Generated**: embeddings, similarity scores, context relevance\n\n## EMBEDDING PROVIDERS\n\n### OpenAI (Primary)\n- Model: `text-embedding-3-small`\n- Dimensions: 1536\n- Cost-effective for production\n- High quality embeddings\n\n### Gemini (Alternative)\n- Model: `text-embedding-004`\n- Dimensions: 768\n- Google's embedding model\n- Good for experimentation\n\n### Local (Fallback)\n- Model: `Xenova/all-MiniLM-L6-v2`\n- Dimensions: 384\n- Runs offline with Transformers.js\n- Privacy-focused option\n\n## VECTOR DATABASE\n\n### ChromaDB Integration\n- **Collections** - Organized by timeline or content type\n- **Metadata filtering** - Search by POV, arc, episode\n- **Similarity search** - Cosine similarity with configurable threshold\n- **Batch operations** - Efficient bulk insert/update/delete\n\n### Collection Structure\n```typescript\n{\n  id: string,           // Unique chapter identifier\n  embeddings: number[], // Vector representation\n  metadata: {\n    pov: string,\n    title: string,\n    timeline: string,\n    arc: string,\n    episode: number,\n    chapter: number,\n    location: string,\n    wordCount: number,\n    filePath: string\n  },\n  document: string      // Chapter content or excerpt\n}\n```\n\n## DEVELOPMENT WORKFLOW\n\n### Setup\n1. Install dependencies (`chromadb`, `openai`, `@google/generative-ai`)\n2. Configure embedding providers (API keys)\n3. Initialize ChromaDB collections\n4. Process existing content for embeddings\n\n### Content Processing\n1. Read markdown files from timeline repositories\n2. Extract frontmatter and content\n3. Generate embeddings using configured provider\n4. Store in ChromaDB with metadata\n5. Update search indices\n\n### Search Operations\n1. Generate query embedding\n2. Perform similarity search in ChromaDB\n3. Filter results by metadata (timeline, POV, etc.)\n4. Rank by relevance and context\n5. Return formatted results\n\n## INTEGRATION WITH MCP SERVER\n\n### RAG Tools (Planned)\n- `rag-search` - Semantic search across content\n- `rag-similar` - Find similar chapters\n- `rag-context` - Assemble context for AI interactions\n- `rag-index` - Process and index new content\n- `rag-stats` - Get embedding and search statistics\n\n## PRINCIPLES\n\n- **Semantic Understanding** - Go beyond keyword matching\n- **Timeline Awareness** - Respect narrative boundaries\n- **Character Context** - Understand POV relationships\n- **Scalable** - Handle growing content efficiently\n- **Provider Agnostic** - Support multiple embedding models\n- **Privacy Conscious** - Local options available\n\n## TESTING STRATEGY\n\n- **Unit tests** - Individual components and providers\n- **Integration tests** - End-to-end search workflows\n- **Performance tests** - Embedding generation and search speed\n- **Quality tests** - Semantic similarity accuracy\n- **Provider tests** - All embedding providers work correctly\n\n## STYLE\n\n- **Type-safe** - Strict TypeScript with proper interfaces\n- **Async/await** - Modern async patterns throughout\n- **Error handling** - Comprehensive error types and recovery\n- **Configurable** - Easy to switch providers and settings\n- **Documented** - Clear examples and API documentation\n- **Tested** - High coverage with realistic scenarios",
  "tools": ["fs_read", "fs_write", "execute_bash"],
  "toolAliases": {},
  "allowedTools": ["fs_read", "fs_write", "execute_bash"],
  "resources": ["file://README.md", "file://package.json", "file://lib/"],
  "hooks": {},
  "toolsSettings": {
    "execute_bash": {
      "alwaysAllow": [
        {
          "preset": "readOnly"
        }
      ]
    }
  }
}
